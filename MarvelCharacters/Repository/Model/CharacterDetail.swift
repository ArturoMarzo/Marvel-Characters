import UIKit

struct CharacterDetail {
    let id: UInt
    let name: String
    let description: String?
    let thumbnail: String?
    let comics: [CharacterDetailComic]?
    let availableComics: Int
    let series: [CharacterDetailSerie]?
    let availableSeries: Int
    let stories: [CharacterDetailStory]?
    let availableStories: Int
    
    // Receives the struct generated by the user service parser
    init?(characterDetailEntity: CharacterDetailEntity) {
        guard let id  = characterDetailEntity.id, let name = characterDetailEntity.name else { return nil }
        self.id = id
        self.name = name
        description = characterDetailEntity.description
        if let path = characterDetailEntity.thumbnail?.path,
            let extensionFile = characterDetailEntity.thumbnail?.extensionFile {
            thumbnail = "\(path).\(extensionFile)"
        } else {
            thumbnail = nil
        }
        
        if let comics = characterDetailEntity.comics?.items {
            var comicsDTO = [CharacterDetailComic]()
            for comic in comics {
                comicsDTO.append(CharacterDetailComic(name: comic.name))
            }
            self.comics = comicsDTO
            self.availableComics = characterDetailEntity.comics?.available ?? 0
        } else {
            self.comics = [CharacterDetailComic]()
            self.availableComics = 0
        }
        
        if let series = characterDetailEntity.series?.items {
            var seriesDTO = [CharacterDetailSerie]()
            for serie in series {
                seriesDTO.append(CharacterDetailSerie(name: serie.name))
            }
            self.series = seriesDTO
            self.availableSeries = characterDetailEntity.series?.available ?? 0
        } else {
            self.series = [CharacterDetailSerie]()
            self.availableSeries = 0
        }
        
        if let storys = characterDetailEntity.stories?.items {
            var storiesDTO = [CharacterDetailStory]()
            for story in storys {
                storiesDTO.append(CharacterDetailStory(name: story.name))
            }
            self.stories = storiesDTO
            self.availableStories = characterDetailEntity.stories?.available ?? 0
        } else {
            self.stories = [CharacterDetailStory]()
            self.availableStories = 0
        }
    }
}

struct CharacterDetailComic {
    let name: String
}

struct CharacterDetailSerie {
    let name: String
}

struct CharacterDetailStory {
    let name: String
}
