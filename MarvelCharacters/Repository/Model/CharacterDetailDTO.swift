import UIKit

struct CharacterDetailDTO {
    let id: UInt
    let name: String
    let description: String?
    let thumbnail: String?
    let comics: [CharacterDetailComicDTO]?
    let availableComics: Int
    let series: [CharacterDetailSerieDTO]?
    let availableSeries: Int
    let stories: [CharacterDetailStoryDTO]?
    let availableStories: Int
    
    // Receives the struct generated by the user service parser
    init?(characterDetailDAO: CharacterDetailDAO) {
        guard let id  = characterDetailDAO.id, let name = characterDetailDAO.name else { return nil }
        self.id = id
        self.name = name
        description = characterDetailDAO.description
        if let path = characterDetailDAO.thumbnail?.path,
            let extensionFile = characterDetailDAO.thumbnail?.extensionFile {
            thumbnail = "\(path).\(extensionFile)"
        } else {
            thumbnail = nil
        }
        
        if let comics = characterDetailDAO.comics?.items {
            var comicsDTO = [CharacterDetailComicDTO]()
            for comic in comics {
                comicsDTO.append(CharacterDetailComicDTO(name: comic.name))
            }
            self.comics = comicsDTO
            self.availableComics = characterDetailDAO.comics?.available ?? 0
        } else {
            self.comics = [CharacterDetailComicDTO]()
            self.availableComics = 0
        }
        
        if let series = characterDetailDAO.series?.items {
            var seriesDTO = [CharacterDetailSerieDTO]()
            for serie in series {
                seriesDTO.append(CharacterDetailSerieDTO(name: serie.name))
            }
            self.series = seriesDTO
            self.availableSeries = characterDetailDAO.series?.available ?? 0
        } else {
            self.series = [CharacterDetailSerieDTO]()
            self.availableSeries = 0
        }
        
        if let storys = characterDetailDAO.stories?.items {
            var storiesDTO = [CharacterDetailStoryDTO]()
            for story in storys {
                storiesDTO.append(CharacterDetailStoryDTO(name: story.name))
            }
            self.stories = storiesDTO
            self.availableStories = characterDetailDAO.stories?.available ?? 0
        } else {
            self.stories = [CharacterDetailStoryDTO]()
            self.availableStories = 0
        }
    }
}

struct CharacterDetailComicDTO {
    let name: String
}

struct CharacterDetailSerieDTO {
    let name: String
}

struct CharacterDetailStoryDTO {
    let name: String
}
